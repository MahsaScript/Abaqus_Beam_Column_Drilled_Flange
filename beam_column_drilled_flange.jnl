# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openSolidworks(fileName=
    'C:/Users/mofid/Downloads/Fd/Abaqus/beam-connetion-1.snapshot.3/Beam connection asm.SLDASM'
    , topology=SOLID)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, convertToAnalytical=1
    , dimensionality=THREE_D, geometryFile=mdb.acis, name=
    'Beam connection asm-1', stitchEdges=1, stitchTolerance=1.0, type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].PartFromGeometryFile(bodyNum=2, combine=False, 
    convertToAnalytical=1, dimensionality=THREE_D, geometryFile=mdb.acis, name=
    'Beam connection asm-2', stitchEdges=1, stitchTolerance=1.0, type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].PartFromGeometryFile(bodyNum=3, combine=False, 
    convertToAnalytical=1, dimensionality=THREE_D, geometryFile=mdb.acis, name=
    'Beam connection asm-3', stitchEdges=1, stitchTolerance=1.0, type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].PartFromGeometryFile(bodyNum=4, combine=False, 
    convertToAnalytical=1, dimensionality=THREE_D, geometryFile=mdb.acis, name=
    'Beam connection asm-4', stitchEdges=1, stitchTolerance=1.0, type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].PartFromGeometryFile(bodyNum=5, combine=False, 
    convertToAnalytical=1, dimensionality=THREE_D, geometryFile=mdb.acis, name=
    'Beam connection asm-5', stitchEdges=1, stitchTolerance=1.0, type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].PartFromGeometryFile(bodyNum=6, combine=False, 
    convertToAnalytical=1, dimensionality=THREE_D, geometryFile=mdb.acis, name=
    'Beam connection asm-6', stitchEdges=1, stitchTolerance=1.0, type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].PartFromGeometryFile(bodyNum=7, combine=False, 
    convertToAnalytical=1, dimensionality=THREE_D, geometryFile=mdb.acis, name=
    'Beam connection asm-7', stitchEdges=1, stitchTolerance=1.0, type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].PartFromGeometryFile(bodyNum=8, combine=False, 
    convertToAnalytical=1, dimensionality=THREE_D, geometryFile=mdb.acis, name=
    'Beam connection asm-8', stitchEdges=1, stitchTolerance=1.0, type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].PartFromGeometryFile(bodyNum=9, combine=False, 
    convertToAnalytical=1, dimensionality=THREE_D, geometryFile=mdb.acis, name=
    'Beam connection asm-9', stitchEdges=1, stitchTolerance=1.0, type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'Beam connection asm-1-1', part=
    mdb.models['Model-1'].parts['Beam connection asm-1'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'Beam connection asm-2-1', part=
    mdb.models['Model-1'].parts['Beam connection asm-2'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'Beam connection asm-3-1', part=
    mdb.models['Model-1'].parts['Beam connection asm-3'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'Beam connection asm-4-1', part=
    mdb.models['Model-1'].parts['Beam connection asm-4'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'Beam connection asm-5-1', part=
    mdb.models['Model-1'].parts['Beam connection asm-5'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'Beam connection asm-6-1', part=
    mdb.models['Model-1'].parts['Beam connection asm-6'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'Beam connection asm-7-1', part=
    mdb.models['Model-1'].parts['Beam connection asm-7'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'Beam connection asm-8-1', part=
    mdb.models['Model-1'].parts['Beam connection asm-8'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'Beam connection asm-9-1', part=
    mdb.models['Model-1'].parts['Beam connection asm-9'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openStep(
    'C:/Users/mofid/Downloads/Fd/Abaqus/nut-bolts-1.snapshot.6/STEP/M10coarse.STEP'
    , scaleFromFile=OFF)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, dimensionality=
    THREE_D, geometryFile=mdb.acis, name='M10coarse-1', type=DEFORMABLE_BODY)
mdb.models['Model-1'].PartFromGeometryFile(bodyNum=2, combine=False, 
    dimensionality=THREE_D, geometryFile=mdb.acis, name='M10coarse-2', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='M10coarse-1-1', 
    part=mdb.models['Model-1'].parts['M10coarse-1'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='M10coarse-2-1', 
    part=mdb.models['Model-1'].parts['M10coarse-2'])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(106.784682, -182.698464, -33.157653))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-2-1', ), 
    vector=(100.58642, 169.542481, 44.623529))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(5.0, 0.0, 
    -8.660254), axisPoint=(83.894224, -148.455437, -13.019676), instanceList=(
    'M10coarse-1-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(-215.422921, 73.669874, 7.334936))
del mdb.models['Model-1'].rootAssembly.features['M10coarse-1-1']
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='M10coarse-1-1', 
    part=mdb.models['Model-1'].parts['M10coarse-1'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='M10coarse-2-1', 
    part=mdb.models['Model-1'].parts['M10coarse-2'])
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(10.0, 
    -0.625, 0.0), axisPoint=(-32.890458, -2.510444, 11.477723), instanceList=(
    'M10coarse-1-1', ))
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(-0.257374, 
    -16.1757, -1.295351), axisPoint=(-25.645426, 4.551375, 52.404343), 
    instanceList=('M10coarse-1-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(62.202037, -17.988986, -19.687274))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(2.314103, -0.240172, 0.129377))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(-0.338975, -0.598264, 4.952492))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(-0.672882, -2.318803, 0.974447))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(-0.672882, -2.318803, 0.974447))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(-0.364419, -0.897201, -1.903777))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(0.19789, -0.346954, 2.572863))
mdb.models['Model-1'].rootAssembly.rotate(angle=10.0, axisDirection=(1.952346, 
    4.81919, -4.332174), axisPoint=(100.610881, -34.322777, 43.734615), 
    instanceList=('M10coarse-1-1', ))
del mdb.models['Model-1'].rootAssembly.features['M10coarse-1-1']
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1']
mdb.models['Model-1'].parts['M10coarse-1'].features['STEP Geometry-1'].suppress(
    )
mdb.models['Model-1'].parts['M10coarse-1'].resumeAllFeatures()
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='M10coarse-1-1', 
    part=mdb.models['Model-1'].parts['M10coarse-1'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='M10coarse-2-1', 
    part=mdb.models['Model-1'].parts['M10coarse-2'])
mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].translateTo(
    clearance=0.0, direction=(0.0, 1.0, 0.0), fixedList=(
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[0], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[1], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[2], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[3], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[4], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[5], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[6], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[7], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[8], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[9], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[10], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[11], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[12], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[13], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[14], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[15], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[16], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[17], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[18], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[19], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[20], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[21], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[22], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[23], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[24], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[25], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[26], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[27], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[28], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[29], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[30], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[31], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[32], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[33], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[34], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[35], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[36], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[37], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[38], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[39], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[40], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[41], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[42], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[43], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[44], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[45], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[46], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[47], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[48], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[49], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[50], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[51], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[52], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[53], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[54], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[55], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[56], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[57], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[58], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[59], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[60], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[61], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[62], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[63], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[64], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[65], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[66], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[67], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[68], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[69], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[70], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[71], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[72], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[73], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[74], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[75], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[76], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[77], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[78], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[79], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[80], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[81], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[82], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[83], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[84], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[85], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[86], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[87], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[88], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[89], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[90], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[91], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[92], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[93], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[94], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[95], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[96], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[97], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[98], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[99], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[100], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[101], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[102], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[103], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[104], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[105], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[106], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[107], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[108], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[109], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[110], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[111], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[112], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[113], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces[114]), 
    movableList=(
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[0], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[1], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[2], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[3], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[4], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[5], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[6], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[7], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[8], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[9], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[10], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[11], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[12], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[13], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[14], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[15], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[16], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[17], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[18], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[19], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[20], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[21], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[22], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[23], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[24], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[25], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[26], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[27], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[28], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[29], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[30], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[31], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[32], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[33], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[34], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[35], 
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-2-1'].faces[36]))
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1']
del mdb.models['Model-1'].rootAssembly.features['M10coarse-1-1']
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='M10coarse-1-1', 
    part=mdb.models['Model-1'].parts['M10coarse-1'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='M10coarse-2-1', 
    part=mdb.models['Model-1'].parts['M10coarse-2'])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(-132.215318, -22.739842, 19.182093))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-2-1', ), 
    vector=(-133.332037, -8.610952, 12.531967))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-2-1', ), 
    vector=(2.943349, 0.0, 3.381255))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Beam connection asm-5-1', 'Beam connection asm-7-1', 
    'Beam connection asm-9-1', 'M10coarse-1-1'), vector=(0.0, -0.264156, 0.0))
mdb.models['Model-1'].rootAssembly.rotate(angle=-90.0, axisDirection=(0.0, 0.0, 
    -8.660254), axisPoint=(-160.105776, 14.908902, 39.32007), instanceList=(
    'M10coarse-1-1', ))
mdb.models['Model-1'].rootAssembly.rotate(angle=-90.0, axisDirection=(0.59819, 
    0.0, -8.63957), axisPoint=(-166.060328, 1.721257, 31.192683), instanceList=
    ('M10coarse-2-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(0.285265, -2.231327, 1.311093))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(0.4731, -0.873809, 5.861741))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(0.775103, -0.317491, 14.194618))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(4.471688, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(1.971688, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-2-1', ), 
    vector=(27.14588, -0.234982, 29.059718))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-2-1', ), 
    vector=(2.5, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-2-1', ), 
    vector=(3.75, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-2-1', ), 
    vector=(2.5, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-2-1', ), 
    vector=(-0.383085, 2.098815, 0.101777))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-2-1', ), 
    vector=(0.299095, -1.160254, -4.319785))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(2.330127, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(-5.30697, -0.247246, -18.707198))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(-5.0, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-2-1', ), 
    vector=(35.045479, 1.314193, -18.449796))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-2-1', ), 
    vector=(-37.978547, 0.0, -3.998749))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-2-1', ), 
    vector=(4.735844, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-1-1', ), 
    vector=(-5.0, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-2-1', ), 
    vector=(-0.074441, 2.098799, -0.101786))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-2-1', ), 
    vector=(0.244274, -0.93856, 1.903042))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('M10coarse-2-1', ), 
    vector=(0.244274, -0.93856, 1.903042))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('M10coarse-1-1', ), 
    number1=1, number2=3, spacing1=66.3668, spacing2=20.002)
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, -1.0, 0.0), instanceList=('M10coarse-1-1', ), 
    number1=1, number2=3, spacing1=66.3668, spacing2=20.002)
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('M10coarse-1-1-lin-1-3', ), 
    number1=1, number2=3, spacing1=66.3668, spacing2=20.002)
del mdb.models['Model-1'].rootAssembly.features['M10coarse-1-1-lin-1-3-lin-1-2']
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, -1.0, 0.0), instanceList=('M10coarse-1-1-lin-1-3-1', 
    ), number1=1, number2=3, spacing1=66.3668, spacing2=20.002)
del mdb.models['Model-1'].rootAssembly.features['M10coarse-1-1-lin-1-3-1-lin-1-2']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, -1.0, 0.0), instanceList=('M10coarse-2-1', ), 
    number1=1, number2=5, spacing1=7.56939, spacing2=19.3072)
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1-lin-1-4']
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1-lin-1-5']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ExplicitDynamicsStep(improvedDtMethod=ON, name='Step-1', 
    previous='Initial')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Material(name='Material-1')
mdb.models['Model-1'].materials['Material-1'].Density(table=((7850.0, ), ))
mdb.models['Model-1'].materials['Material-1'].Elastic(table=((200000000000.0, 
    0.25), ))
mdb.models['Model-1'].parts['M10coarse-1'].Set(cells=
    mdb.models['Model-1'].parts['M10coarse-1'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['Beam connection asm-1'].Set(cells=
    mdb.models['Model-1'].parts['Beam connection asm-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-1')
del mdb.models['Model-1'].parts['M10coarse-1'].sets['Set-1']
mdb.models['Model-1'].HomogeneousSolidSection(material='Material-1', name=
    'Section-1', thickness=None)
mdb.models['Model-1'].parts['M10coarse-1'].Set(cells=
    mdb.models['Model-1'].parts['M10coarse-1'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['M10coarse-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['M10coarse-1'].sets['Set-1'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Beam connection asm-2'].Set(cells=
    mdb.models['Model-1'].parts['Beam connection asm-2'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['Beam connection asm-2'].SectionAssignment(offset=
    0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Beam connection asm-2'].sets['Set-1'], 
    sectionName='Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Beam connection asm-3'].Set(cells=
    mdb.models['Model-1'].parts['Beam connection asm-3'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['Beam connection asm-3'].SectionAssignment(offset=
    0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Beam connection asm-3'].sets['Set-1'], 
    sectionName='Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Beam connection asm-4'].Set(cells=
    mdb.models['Model-1'].parts['Beam connection asm-4'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['Beam connection asm-4'].SectionAssignment(offset=
    0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Beam connection asm-4'].sets['Set-1'], 
    sectionName='Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Beam connection asm-5'].Set(cells=
    mdb.models['Model-1'].parts['Beam connection asm-5'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['Beam connection asm-5'].SectionAssignment(offset=
    0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Beam connection asm-5'].sets['Set-1'], 
    sectionName='Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Beam connection asm-6'].Set(cells=
    mdb.models['Model-1'].parts['Beam connection asm-6'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['Beam connection asm-6'].SectionAssignment(offset=
    0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Beam connection asm-6'].sets['Set-1'], 
    sectionName='Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Beam connection asm-7'].Set(cells=
    mdb.models['Model-1'].parts['Beam connection asm-7'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['Beam connection asm-7'].SectionAssignment(offset=
    0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Beam connection asm-7'].sets['Set-1'], 
    sectionName='Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Beam connection asm-8'].Set(cells=
    mdb.models['Model-1'].parts['Beam connection asm-8'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['Beam connection asm-8'].SectionAssignment(offset=
    0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Beam connection asm-8'].sets['Set-1'], 
    sectionName='Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Beam connection asm-9'].Set(cells=
    mdb.models['Model-1'].parts['Beam connection asm-9'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['Beam connection asm-9'].SectionAssignment(offset=
    0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Beam connection asm-9'].sets['Set-1'], 
    sectionName='Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['M10coarse-2'].Set(cells=
    mdb.models['Model-1'].parts['M10coarse-2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['M10coarse-2'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['M10coarse-2'].sets['Set-1'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1-lin-1-2-1'].faces.getSequenceFromMask(
    ('[#ffffffff:3 #7ffff ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=-8351890.0, name='Load-1', 
    region=mdb.models['Model-1'].rootAssembly.surfaces['Surf-1'])
mdb.models['Model-1'].TabularAmplitude(data=((0.0, 0.0), (1.0, 1.0)), name=
    'Amp-1', smooth=SOLVER_DEFAULT, timeSpan=STEP)
mdb.models['Model-1'].loads['Load-1'].setValues(amplitude='Amp-1')
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-2', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1-lin-1-2-1'].faces.getSequenceFromMask(
    ('[#ffffffff:3 #7ffff ]', ), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-7-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ), name='Set-1')
mdb.models['Model-1'].EncastreBC(createStepName='Step-1', localCsys=None, name=
    'BC-1', region=mdb.models['Model-1'].rootAssembly.sets['Set-1'])
mdb.models['Model-1'].boundaryConditions['BC-1'].move('Step-1', 'Initial')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Beam connection asm-1'].setMeshControls(elemShape=
    WEDGE, regions=
    mdb.models['Model-1'].parts['Beam connection asm-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=SYSTEM_ASSIGN)
mdb.models['Model-1'].parts['Beam connection asm-1'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=4.8)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Beam connection asm-1'].setMeshControls(elemShape=
    HEX, regions=
    mdb.models['Model-1'].parts['Beam connection asm-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=SYSTEM_ASSIGN)
mdb.models['Model-1'].parts['Beam connection asm-1'].setMeshControls(elemShape=
    TET, regions=
    mdb.models['Model-1'].parts['Beam connection asm-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['Beam connection asm-1'].setElementType(elemTypes=(
    ElemType(elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['Beam connection asm-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Beam connection asm-1'].generateMesh()
mdb.models['Model-1'].parts['Beam connection asm-2'].setMeshControls(elemShape=
    TET, regions=
    mdb.models['Model-1'].parts['Beam connection asm-2'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['Beam connection asm-2'].setElementType(elemTypes=(
    ElemType(elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['Beam connection asm-2'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Beam connection asm-2'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=4.8)
mdb.models['Model-1'].parts['Beam connection asm-2'].generateMesh()
mdb.models['Model-1'].parts['Beam connection asm-3'].setMeshControls(elemShape=
    TET, regions=
    mdb.models['Model-1'].parts['Beam connection asm-3'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['Beam connection asm-3'].setElementType(elemTypes=(
    ElemType(elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['Beam connection asm-3'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Beam connection asm-3'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=4.8)
mdb.models['Model-1'].parts['Beam connection asm-3'].generateMesh()
mdb.models['Model-1'].parts['Beam connection asm-4'].setMeshControls(elemShape=
    TET, regions=
    mdb.models['Model-1'].parts['Beam connection asm-4'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['Beam connection asm-4'].setElementType(elemTypes=(
    ElemType(elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['Beam connection asm-4'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Beam connection asm-4'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=4.8)
mdb.models['Model-1'].parts['Beam connection asm-4'].generateMesh()
mdb.models['Model-1'].parts['Beam connection asm-5'].setMeshControls(elemShape=
    TET, regions=
    mdb.models['Model-1'].parts['Beam connection asm-5'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['Beam connection asm-5'].setElementType(elemTypes=(
    ElemType(elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['Beam connection asm-5'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Beam connection asm-5'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=19.0)
mdb.models['Model-1'].parts['Beam connection asm-5'].generateMesh()
mdb.models['Model-1'].parts['Beam connection asm-6'].setMeshControls(elemShape=
    TET, regions=
    mdb.models['Model-1'].parts['Beam connection asm-6'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['Beam connection asm-6'].setElementType(elemTypes=(
    ElemType(elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['Beam connection asm-6'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Beam connection asm-6'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=19.0)
mdb.models['Model-1'].parts['Beam connection asm-6'].generateMesh()
mdb.models['Model-1'].parts['Beam connection asm-7'].setMeshControls(elemShape=
    TET, regions=
    mdb.models['Model-1'].parts['Beam connection asm-7'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['Beam connection asm-7'].setElementType(elemTypes=(
    ElemType(elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['Beam connection asm-7'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Beam connection asm-7'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=16.0)
mdb.models['Model-1'].parts['Beam connection asm-7'].generateMesh()
mdb.models['Model-1'].parts['Beam connection asm-8'].setMeshControls(elemShape=
    TET, regions=
    mdb.models['Model-1'].parts['Beam connection asm-8'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['Beam connection asm-8'].setElementType(elemTypes=(
    ElemType(elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['Beam connection asm-8'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Beam connection asm-8'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=16.0)
mdb.models['Model-1'].parts['Beam connection asm-8'].generateMesh()
mdb.models['Model-1'].parts['Beam connection asm-9'].setMeshControls(elemShape=
    TET, regions=
    mdb.models['Model-1'].parts['Beam connection asm-9'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['Beam connection asm-9'].setElementType(elemTypes=(
    ElemType(elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['Beam connection asm-9'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Beam connection asm-9'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=35.0)
mdb.models['Model-1'].parts['Beam connection asm-9'].generateMesh()
mdb.models['Model-1'].parts['M10coarse-1'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Model-1'].parts['M10coarse-1'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['M10coarse-1'].setElementType(elemTypes=(ElemType(
    elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['M10coarse-1'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['M10coarse-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.8)
mdb.models['Model-1'].parts['M10coarse-1'].generateMesh()
mdb.models['Model-1'].parts['M10coarse-2'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Model-1'].parts['M10coarse-2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['M10coarse-2'].setElementType(elemTypes=(ElemType(
    elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['M10coarse-2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['M10coarse-2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.88)
mdb.models['Model-1'].parts['M10coarse-2'].generateMesh()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numDomains=1, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.models['Model-1'].parts['Beam connection asm-1'].Set(cells=
    mdb.models['Model-1'].parts['Beam connection asm-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-6')
mdb.models['Model-1'].parts['Beam connection asm-1'].SectionAssignment(offset=
    0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Beam connection asm-1'].sets['Set-6'], 
    sectionName='Section-1', thicknessAssignment=FROM_SECTION)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3542 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8659 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STATUS IS NOT AVAILABLE FOR ELEMENT TYPE C3D10M', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STATUS IS NOT AVAILABLE FOR ELEMENT TYPE C3D10M', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\system32\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 16228, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='M10coarse-1-2', 
    part=mdb.models['Model-1'].parts['M10coarse-1'])
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-3', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-5-1'].faces.getSequenceFromMask(
    ('[#3fffff ]', ), ))
mdb.models['Model-1'].loads['Load-1'].setValues(region=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-3'])
del mdb.models['Model-1'].rootAssembly.features['M10coarse-1-2']
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=-8351.89)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 3356, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=-83.51)
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=-8.351)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 5196, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-1'].suppress()
mdb.models['Model-1'].rootAssembly.Set(name='Set-Nodal', nodes=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-5-1'].nodes.getSequenceFromMask(
    mask=('[#55555553 #195 #0 #f000008 #80000 #8000000 #0', 
    ' #18 #2000 #200000 #3c00 #20 #2000 #0', 
    ' #c00 #0:10 #3f00 #0:8 #300d400 #2aa00800 #100', 
    ' #42000000 #394 #4000000 #2 #8001000 #0:2 #880000', 
    ' #0:2 #3a004000 #5c0 #0:2 #41900a00 #75 #0:17', 
    ' #2000000 #0:13 #20000010 #0:18 #85800000 #e080f #0:18', 
    ' #20 #0:11 #40000000 #0:8 #94000000 #4001c #0:3', 
    ' #c000 #0:2 #9 #80000 #8000040 #0:3 #c0000000', 
    ' #0 #11c80 #100006 #0:4 #1b00 #0:4 #2304 ]', ), ))
mdb.models['Model-1'].rootAssembly.Set(name='Set-Force', vertices=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-5-1'].vertices.getSequenceFromMask(
    ('[#55555553 #55 ]', ), ))
mdb.models['Model-1'].ConcentratedForce(amplitude='Amp-1', cf1=86.0, 
    createStepName='Step-1', distributionType=UNIFORM, field='', localCsys=None
    , name='Load-2', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-Force'])
del mdb.models['Model-1'].loads['Load-1']
mdb.models['Model-1'].ContactProperty('IntProp-1')
mdb.models['Model-1'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.1, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.1, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].rootAssembly.Surface(name='m_Surf-bult', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].faces.getSequenceFromMask(
    ('[#ffffffff:3 #7ffff ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='s_Surf-4', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-7-1'].faces.getSequenceFromMask(
    ('[#287f ]', ), ))
mdb.models['Model-1'].SurfaceToSurfaceContactExp(clearanceRegion=None, 
    createStepName='Step-1', datumAxis=None, initialClearance=OMIT, 
    interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['m_Surf-bult'], 
    mechanicalConstraint=KINEMATIC, name='Int-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['s_Surf-4'], sliding=FINITE)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 4876, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-2'].setValues(cf1=1.0, distributionType=
    UNIFORM, field='')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 17592, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['Step-1'].setValues(improvedDtMethod=ON, 
    massScaling=((SEMI_AUTOMATIC, MODEL, THROUGHOUT_STEP, 0.0, 0.0005, 
    BELOW_MIN, 100, 0, 0.0, 0.0, 0, None), ))
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-beam', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-5-1'].faces.getSequenceFromMask(
    ('[#200000 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude='Amp-1', createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=-8351890.0, name='Load-3', 
    region=mdb.models['Model-1'].rootAssembly.surfaces['Surf-beam'])
mdb.models['Model-1'].loads['Load-3'].setValues(magnitude=8351890.0)
mdb.models['Model-1'].loads['Load-2'].suppress()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 9980, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-9-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-4')
mdb.models['Model-1'].EncastreBC(createStepName='Initial', localCsys=None, 
    name='BC-2', region=mdb.models['Model-1'].rootAssembly.sets['Set-4'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 16984, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-3'].setValues(magnitude=835.189)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 10268, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-3'].setValues(magnitude=8.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 11816, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-3'].setValues(magnitude=0.5)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 2436, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 15100, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-3'].setValues(magnitude=0.0005)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 10364, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-6-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-5')
mdb.models['Model-1'].EncastreBC(createStepName='Step-1', localCsys=None, name=
    'BC-3', region=mdb.models['Model-1'].rootAssembly.sets['Set-5'])
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].boundaryConditions['BC-3'].move('Step-1', 'Initial')
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-2-1'].faces.getSequenceFromMask(
    mask=('[#40 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-4-1'].faces.getSequenceFromMask(
    mask=('[#40 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-8-1'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-9-1'].faces.getSequenceFromMask(
    mask=('[#400 ]', ), ), name='Set-6')
mdb.models['Model-1'].EncastreBC(createStepName='Step-1', localCsys=None, name=
    'BC-4', region=mdb.models['Model-1'].rootAssembly.sets['Set-6'])
mdb.models['Model-1'].boundaryConditions['BC-4'].move('Step-1', 'Initial')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 8224, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-3'].setValues(magnitude=5e-10)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 13296, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].boundaryConditions['BC-1'].suppress()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 3344, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-3'].suppress()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 13628, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].boundaryConditions['BC-2'].suppress()
mdb.models['Model-1'].boundaryConditions['BC-3'].suppress()
mdb.models['Model-1'].boundaryConditions['BC-4'].suppress()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 15004, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['Step-1'].setValues(improvedDtMethod=ON, 
    massScaling=((SEMI_AUTOMATIC, MODEL, THROUGHOUT_STEP, 0.0, 0.0005, 
    BELOW_MIN, 20, 0, 0.0, 0.0, 0, None), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 10940, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].materials['Material-1'].density.setValues(table=((
    7.83e-09, ), ))
mdb.models['Model-1'].materials['Material-1'].elastic.setValues(table=((
    207000.0, 0.25), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 4564, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['Step-1'].setValues(improvedDtMethod=ON, 
    massScaling=((SEMI_AUTOMATIC, MODEL, THROUGHOUT_STEP, 0.0, 0.0005, 
    BELOW_MIN, 10, 0, 0.0, 0.0, 0, None), ), timePeriod=0.001)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 15152, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].materials['Material-1'].elastic.setValues(table=((207.0, 
    0.25), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 15052, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['Step-1'].setValues(improvedDtMethod=ON, 
    massScaling=PREVIOUS_STEP)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 15832, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['Step-1'].setValues(improvedDtMethod=ON, 
    massScaling=((SEMI_AUTOMATIC, MODEL, THROUGHOUT_STEP, 0.0, 1.0, BELOW_MIN, 
    200000, 0, 0.0, 0.0, 0, None), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 7840, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
del mdb.models['Model-1'].steps['Step-1']
mdb.models['Model-1'].StaticStep(adaptiveDampingRatio=0.05, 
    continueDampingFactors=False, initialInc=1e-05, name='Step-1', previous=
    'Initial', stabilizationMagnitude=0.0002, stabilizationMethod=
    DISSIPATED_ENERGY_FRACTION)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\system32\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 8896, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 19 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-7', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-5-1'].faces.getSequenceFromMask(
    ('[#200000 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude='Amp-1', createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=8000000.0, name='Load-1', 
    region=mdb.models['Model-1'].rootAssembly.surfaces['Surf-7'])
mdb.models['Model-1'].boundaryConditions['BC-4'].resume()
mdb.models['Model-1'].boundaryConditions['BC-3'].resume()
mdb.models['Model-1'].boundaryConditions['BC-2'].resume()
mdb.models['Model-1'].boundaryConditions['BC-1'].resume()
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 3640.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 1061.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'An error occurred during a write access to <rank=0,arg_name=tmpdir>Job-1.cps file. Check the disk space on your system.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-22', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-22'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-22']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'An error occurred during a write access to <rank=0,arg_name=C:\\Windows\\system32>Job-22.stt file. Check the disk space on your system.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'An error occurred during a write access to <rank=0,arg_name=C:\\Windows\\system32>Job-22.stt file. Check the disk space on your system.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-22.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-22.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-22']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName-Beam\\Job-22.odb', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'An error occurred during a write access to <rank=0,arg_name=C:\\DirectoryName-Beam>Job-22.mdl file. Check the disk space on your system.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-22'})
mdb.jobs['Job-22'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-22']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-22.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-22.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(JOB_ABORTED, {})
mdb.jobs['Job-22']._Message(JOB_ABORTED, {})
mdb.jobs['Job-22'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-22']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'An error occurred during a write access to <rank=0,arg_name=C:\\DirectoryName>Job-22.stt file. Check the disk space on your system.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-22.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-22.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-22'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-22'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-22']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName\\Job-22.odb', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 13804, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 19 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-22', 'memory': 3640.0})
mdb.jobs['Job-22']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(MINIMUM_MEMORY, {'minimum_memory': 1061.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(JOB_COMPLETED, {'time': 'Mon Dec 16 03:14:16 2024', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22'].submit(consistencyChecking=OFF)
mdb.jobs['Job-22']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName\\Job-22.odb', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 15152, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 19 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-22', 'memory': 3929.0})
mdb.jobs['Job-22']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(MINIMUM_MEMORY, {'minimum_memory': 623.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'An error occurred during a write access to <rank=0,arg_name=C:\\DirectoryName>Job-22.stt file. Check the disk space on your system.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-22'})
del mdb.models['Model-1'].steps['Step-1']
mdb.models['Model-1'].ExplicitDynamicsStep(improvedDtMethod=ON, massScaling=((
    SEMI_AUTOMATIC, MODEL, THROUGHOUT_STEP, 0.0, 0.005, BELOW_MIN, 100, 0, 0.0, 
    0.0, 0, None), ), name='Step-1', previous='Initial')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-22'].submit(consistencyChecking=OFF)
mdb.jobs['Job-22']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-22.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-22.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(JOB_ABORTED, {})
mdb.jobs['Job-22']._Message(JOB_ABORTED, {})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['Job-22']
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numDomains=1, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 7136, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-8', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-5-1'].faces.getSequenceFromMask(
    ('[#200000 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=5.0, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-8'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].steps['Step-1'].setValues(improvedDtMethod=ON, 
    massScaling=((SEMI_AUTOMATIC, MODEL, THROUGHOUT_STEP, 0.0, 0.005, 
    BELOW_MIN, 100, 0, 0.0, 0.0, 0, None), ), scaleFactor=100.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 7592, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
del mdb.models['Model-1'].loads['Load-1']
mdb.models['Model-1'].rootAssembly.Set(name='Set-Nodal-2', nodes=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-1-1'].nodes.getSequenceFromMask(
    mask=('[#67e001 #100000 #600000 #f800fc00 #c07ff01f #e000003f #1ff', 
    ' #f800100 #0:3 #8007001e #e00fc03f #80ff003 #6000400 #3800700', 
    ' #1e003c0 #1f801f0 #fe00fc #4000007f #0 #c001800 #fffffe00', 
    ' #e0fc000 #640007 #780000 #ef000 #4003240 #3fc000 #6020002c', 
    ' #8480c0 #0 #fffff8 #fffff000 #3f0003 #0:2 #c001ffe0', 
    ' #fffafc7 #0:3 #3fffff80 #0:3 #ffe00000 #73fb8f #0:2', 
    ' #10000000 #ff81bfed #1ff #1f8000 #0:3 #b7c000 #f8', 
    ' #0:2 #e00 #0:2 #71f80 #e0000000 #c0ffff07 #ffffffff', 
    ' #1ffffff #0 #1c000 #0 #20000000 #5e47c78 #7e000000', 
    ' #44001f80 #0:5 #976ff800 #ffffff00 #fc00001f #7 #80000000', 
    ' #3fff #962095e0 #0 #ff800018 #200fff #88 #ff', 
    ' #0 #3800 #fffe0 #0:3 #ffe00000 #f0000fff #fc7f00a3', 
    ' #1fff #1000000 #80000 #ffc00036 #fffffc03 #5fde0 #c00c0002', 
    ' #7 #0 #2000 #800003 #8000 #81ce000 #2000000', 
    ' #20 #0:2 #fffffffe #878001ff #fcf8 #8ff07800 #ff', 
    ' #3c00 #c001f000 #3c000fbf #ffffeb #673ff00 #0:2 #1ffc0000', 
    ' #0 #80000 #0:2 #3f20 #9c003800 #248007 #20280380', 
    ' #ff3e0000 #f0000099 #0 #38f7ff80 #fffdfe00 #7 #8000000', 
    ' #fc00 #1020000 #10000 #fffff000 #30000eeb #800007e0 #380', 
    ' #7000000 #0 #401f80 #1f0 #20e09e03 #18010 #ff1e1c00', 
    ' #e503f3bf #f883ffcf #e0108fcf #2c4ff #80 #28000000 #319e00', 
    ' #0 #e07f8006 #4b #0:2 #80000200 #8000001 #70000000', 
    ' #1800000 #0 #f02 #c000 #2000000 #fc000 #0', 
    ' #e0010 #37fe0000 #40121b3e #cdfcc3c #5000006 #79fc0f #1f80ff00', 
    ' #2321003 #800 #cf001e5f #7a11bbc #20003c00 #1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-3-1'].nodes.getSequenceFromMask(
    mask=('[#5000 #0 #e0000000 #1f #30000 #e #0:7', 
    ' #40000000 #10002000 #4000800 #0:6 #a85dd000 #4 #0:2', 
    ' #40 #0:2 #100000 #0:14 #78000000 #200 #0:3', 
    ' #2000000 #0:28 #8000000 #600 #18000 #0:13 #fc0000', 
    ' #0:4 #e3f88100 #18000ff #0:11 #1400000 #0:22 #fc000000', 
    ' #3f80 #0:5 #40000000 #3f0fff #70 #0:18 #c', 
    ' #0:2 #400000 #83fb9f80 #1d0f1 #78000000 #8918 #0:2', 
    ' #18000 #0:2 #1 #0:6 #200 #0:8 #80000500', 
    ' #1 #60 #10078 #10200 #2000000 #2002060 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-5-1'].nodes.getSequenceFromMask(
    mask=('[#0 #3e00000 #f0000007 #3f0003 #1bc00 #e0001c #40000e00', 
    ' #200000 #c0000c00 #e0000 #fc0000f0 #f8001c #f0001f00 #1c1f0001', 
    ' #f000000 #1f800 #0 #3ffffdcc #c000f000 #1 #c00002d', 
    ' #7000 #0 #fffffe8 #e0003f00 #3 #1381fe00 #4081000', 
    ' #2001a #ffb80000 #1fffffff #800c000 #e0007f00 #7 #0:4', 
    ' #ff564000 #fff #0:2 #247fde0 #0 #400007c0 #fff85f0', 
    ' #0:4 #f20f42f0 #3 #0:3 #fc00c000 #1fc03fc1 #5ff5ff8', 
    ' #0 #600f800 #dfc00080 #7 #1000 #1900000 #0', 
    ' #3000000 #1500000 #f0900000 #e2037fff #f83ffc7f #f0008007 #3', 
    ' #0:2 #fc001f80 #0 #2e64014 #f81000 #1f00001 #3002', 
    ' #0 #fc0f80 #7c0 #8fff87 #8000a300 #0 #c00', 
    ' #0 #fff80000 #380e700 #0:3 #78030 #0 #f9002000', 
    ' #73fff #30000 #70f800 #0 #300000 #c0 #70000000', 
    ' #0 #e8000000 #9ee #0 #a0010000 #e0000f9e #301bc0', 
    ' #3e5fe280 #807c00 #c0000000 #30c40f #18000 #0 #2000001', 
    ' #e8cff800 #b75df839 #3 #40003c00 #0 #40000000 #2c5c00', 
    ' #ffcbffff #f7e21fff #e0ffff81 #e7ffffc7 #fc2fffff #ffff71ff #7bffff87', 
    ' #477f9f1 #7418007c #143 #18000 #0 #10000 #0:3', 
    ' #68000000 #7 #0:4 #1fec6008 #28bff00 #3980000 #400', 
    ' #0:2 #20300300 #140003 #180 #3f0007c0 #20ff000 #1c00', 
    ' #3080200 #70 #400100 #c0c1e1c1 #7bc871 #6ac22 #f00', 
    ' #12000c00 #180ac000 #80200000 #803007 #98040031 #a004d004 #1800103b', 
    ' #2d19c0 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-7-1'].nodes.getSequenceFromMask(
    mask=('[#530000 #0:2 #ffc00000 #180000f #3e00007 #3f00 #0:4', 
    ' #ffff #60700081 #53814 #40c1c #c1ac0014 #c0604000 #75d05008', 
    ' #2235 #90b21000 #3a1801d6 #48 #83010268 #cb7d0010 #64100000', 
    ' #c0002e0 #80004 #20000000 #18500c2 #20000 #40000668 #48004020', 
    ' #244c0 #12000000 #800c00a #10180 #100008 #30000020 #24', 
    ' #f0000 #1000210 #0 #bf200000 #0 #3e00 #38000000', 
    ' #300 #7f8 #1000 #1f80 #7f000000 #36800000 #8003f00', 
    ' #0 #c000001c #6061bf #2011f00 #c001f000 #40001 #88000000', 
    ' #d00003c #ae030 #c000 #8080041 #2d0000c0 #20ddc08 #1d7209e', 
    ' #3022 #0:2 #fffb1000 #7fb0bff #0:4 #c0000000 #1ffffff', 
    ' #0:4 #e0000000 #15f #0 #100 #0:2 #ffffff80', 
    ' #3 #fc000 #0:5 #ff000000 #7ffff #0:4 #ffff0000', 
    ' #fc0f #0:2 #e0c00000 #5fc #71ffff0 #0 #10000', 
    ' #0:5 #fff80000 #3fe06 #0:4 #ffffff80 #ff81ffff #6c000007', 
    ' #400 #3e20 #0:2 #ffff800 #3f00000 #0:2 #7fff', 
    ' #0:3 #fc7fffc0 #3 #0 #ff800000 #7ff #0:3', 
    ' #7010 #0 #300 #7c00000 #0:4 #3f00000 #3f', 
    ' #7f90f10 #e000007c #ff87f #0:5 #ffe0007e #7000ff8f #2a0', 
    ' #0:2 #7e0 #0:2 #fffffe00 #f5400007 #7ff #0', 
    ' #200 #1c0 #0:6 #3e780000 #0:2 #20000 #0:2', 
    ' #ce00000 #fee00000 #9 #fc000000 #3ffff #f8000000 #ffff', 
    ' #0 #90000000 #fc000080 #3fff #0 #7e000000 #0:3', 
    ' #fc00004e #3fff #0:5 #e00f8000 #10007fff #3800000e #2', 
    ' #0 #1fc01f8 #0:2 #fffc0000 #1f #fff1c1f8 #c1fffe7f', 
    ' #3f0003ff #0:3 #fffe3000 #0:2 #1f #0:2 #1f80', 
    ' #7c1fffe0 #fff00000 #7 #0 #3800 #831e3ffc #128', 
    ' #0 #ffff3ff0 #f83ffffb #3 #e1c00000 #7100085f #3fffe', 
    ' #1f000000 #0:3 #80000000 #8000c006 #7fffe01b #7c00000 #800', 
    ' #1000 #0 #3000000 #0:2 #1c #ef000038 #c001fe0f', 
    ' #1fc00001 #78600fc1 #f8 #3fe #e0003f80 #1f800f #0:3', 
    ' #780000 #1fffc06 #0 #1e080 #e201f7f9 #1 #0', 
    ' #11e00000 #3c #0 #10 #e00 #38004000 #0', 
    ' #500020 #0 #7200 #0:3 #1c0433f8 #3f000002 #0:2', 
    ' #ff83b3e3 #20f8c7ff #78 #400000 #0:2 #46000 #200000', 
    ' #7e1ff000 #1fa778b0 #103e0f00 #0 #1c10fc00 #0 #3c0f7fe', 
    ' #20000000 #70000 #80000200 #3ff0 #80a0 #e1906000 #18003', 
    ' #80 #80036000 #2003fc7 #18000000 #ffa240fc #d9803c0e #c0fffc', 
    ' #0:3 #3df60000 #0:7 #1dc1 #0:2 #80000000 #19c0800', 
    ' #80000000 #187f03f8 #401dfb0f #300000 #d8004008 #e41f7f #7e0043e0', 
    ' #f81fe7e0 #ee0c087f #38080 #41f800a #3be00018 #800 #0', 
    ' #1f2 #86000000 #0 #1000000 #1c03c8 #0 #40000', 
    ' #600001f0 #fc #0 #ff0c0780 #800007 #80002000 #5e0b06', 
    ' #20f0 #0:2 #30 #3ff89e18 #51c10fb #7cbf0180 #38600', 
    ' #141427e0 #4000000e #0 #1a122300 #203f3040 #c0000000 #c80183', 
    ' #10000000 #0 #c0200000 #87cfce0 #e8000000 #1f #f9f400', 
    ' #1bc001c3 #2 #601800 #0 #18000000 #42c00000 #ffcffdfc', 
    ' #4009ff #0 #1983180 #48180 #0 #4000 #20000000', 
    ' #c0600008 #80001007 #c0000001 #7 #2de18000 #200d8a6 #2e40000', 
    ' #0 #1c00000 #18000 #8000000 #6000000 #1000 #80000004', 
    ' #1 #26019f #40400 #42007d18 #8040 #40181800 #10', 
    ' #0:2 #6c0f2000 #2180200 #10000000 #78309c40 #86880080 #c002cc', 
    ' #0 #11e00000 #0 #20c #0 #20400 #0', 
    ' #140 #7e8000f0 #1c00832a #80000 #810 #2 #100800', ' #4000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-9-1'].nodes.getSequenceFromMask(
    mask=('[#0:2 #800 #0:14 #70000 #38 #0 #f0000', 
    ' #7 #0 #fe0 #0:38 #40000000 #c2800810 #e0ca1208', 
    ' #521051e4 #b #0:2 #1fe7e #0 #44000000 #61001a4', 
    ' #1000000 #a90200 #5880008 #4000084 #20004000 #600075 #40008a40', 
    ' #10004100 #40208400 #84006311 #480004 #4180011 #1040 #19800030', 
    ' #8800 #20000 #73e0000 #0:3 #e8000000 #10 #33c00', 
    ' #0:3 #1 #0:3 #f001e0 #7000 #2000000 #0', 
    ' #270 #0 #10 #8 #2c043f #1800 #c10', 
    ' #40000 #0 #804000 #b0000001 #1 #0:2 #e07fc7b8', 
    ' #3ffff #0:11 #8000 #f8000 #0:6 #ff000000 #fc0497ff', 
    ' #0:4 #fc000000 #c6fff1f8 #7 #0:6 #7c00 #0:8', 
    ' #fffe8000 #20 #c8400000 #0:23 #fff003cb #3f #0', 
    ' #fffe0000 #7 #0 #ff800f08 #207b #0:2 #1ffff', 
    ' #0:8 #1fffffff #0:7 #1f800 #0:3 #f03ffe00 #40000003', 
    ' #1 #0:13 #1100 #0 #3c000000 #0:4 #1f7e000', 
    ' #3f0 #0 #c0000000 #1 #0:11 #ffffff00 #1fff', 
    ' #7fff8000 #b #0 #ffe003f0 #f0000003 #0:4 #2000000', 
    ' #0:3 #471d80 #1150 #0:8 #4c00000 #780f60 #0:3', 
    ' #fffffc00 #7fff807f #0:8 #7fff0 #0:5 #78000 #fc000000', 
    ' #3ff #0:10 #8000000 #0:10 #1f8 #6000000 #7ffc0', 
    ' #0:8 #4 #1000180 #0:3 #72a00 #0:4 #40000000', 
    ' #7 #0:6 #f81f8000 #ffe0ffff #7f #0:3 #ffec0000', 
    ' #0:8 #900000 #0:2 #fc340000 #339fffff #0:7 #1fffe0', 
    ' #0 #cf0000 #0:14 #6fff8000 #e00006 #0:15 #1fe0', 
    ' #0 #83fc0000 #7 #0:11 #18000000 #200009 #0:8', 
    ' #77c #0 #7eff0600 #0:8 #7e0 #0:2 #ffbe0000', 
    ' #600 #0 #e0ff0000 #3cfffe01 #0:6 #c0000000 #1f', 
    ' #0 #fc000000 #f2600003 #fce00015 #7 #0 #e0', 
    ' #0:2 #80100000 #3000002 #1f800000 #7e0 #0:19 #1110c00', 
    ' #3c0000 #80 #30 #0:2 #f002000 #0:13 #77863c', 
    ' #0:42 #8001f800 #0:17 #b03f8 #0:3 #8000000 #0', 
    ' #e000 #0:3 #40000000 #0 #60 #0:7 #fc7c0380', 
    ' #1 #0 #1101f80 #0 #229c0 #0:2 #420000', 
    ' #0 #100010 #0:8 #20004000 #c #0:3 #100000', 
    ' #0:3 #780f8000 #2300 #0:20 #2e0 #0:4 #82000', 
    ' #c00000c0 #1d847 #e0000020 #1 #10 #0:4 #18c00000', 
    ' #1006400 #1c0 #2000 #0:2 #c380000 #40000001 #1000002', 
    ' #20000040 #0:4 #6 #9f0 #3c00 #0 #18000000', 
    ' #20060e00 #0 #f9 #419e00 #87e00000 #0:2 #2400000', 
    ' #e04032 #10 #0:2 #20040000 #0 #e00000 #400e', 
    ' #8000000 #60 #0:4 #80000000 #1 #1a #3c000080', 
    ' #1a0000 #0:3 #4000000 #0 #82000 #0:2 #4003', 
    ' #800000 #0:2 #200000 #80000080 #3820000 #1778 #0', 
    ' #20 #800 #0 #180 #18 #40000300 #400', 
    ' #0:3 #840700 #c0116 #78 #0:4 #98000 #10', 
    ' #0:5 #10010000 #80400390 #204 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1'].nodes.getSequenceFromMask(
    mask=('[#6000 #0:4 #e0000000 #200 #f800 #0:39 #3e000000', 
    ' #f0000000 #e00002 #380 #a70000 #7e #0:13 #80000000', 
    ' #30000003 #0 #4c0000 #5 #2000000 #40000 #0:56', 
    ' #1fffff #0:6 #10000000 #20000 #0:20 #f5c80f #0:3', 
    ' #7e00000 #0:30 #f0000000 #3fbff1 #0:10 #1f603ee0 #0:4', 
    ' #4800 #0:13 #20000000 #3b000000 #4000 #0:2 #78000', 
    ' #15000000 #0:3 #2 #0:9 #8bffe000 #4 #0:11', 
    ' #1c #0:2 #70000 #0:30 #800000 #0 #3000', 
    ' #b00f000 #800 #0 #4000 #0:16 #f000000 #0', 
    ' #8001e0 #0:7 #5c1c0 #0 #80002 #0 #70000000', 
    ' #0 #e020004 #2000 #0 #e33fc000 #3 #0:9', 
    ' #4f700000 #c38f8ff #0:4 #40 #63ffe180 #1000 #0:21', 
    ' #40000 #0:3 #4000 #0:2 #18200 #0:8 #2000000', 
    ' #0:14 #200000 #0:4 #400 #0:8 #20000 #0:21', ' #4000000 #1 #0:3 #400 ]', 
    ), )+\
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1-lin-1-2-1'].nodes.getSequenceFromMask(
    mask=('[#7e00 #0:4 #f3330000 #1630a #fff0 #0:24 #e0000e00', 
    ' #11f0001 #603c1f1e #180 #0:11 #7fc00000 #ffe1c0fb #19e7fc30', 
    ' #f67f8 #c7fffc00 #3987c7ff #0 #1c0000 #2 #7ffe0000', 
    ' #0:2 #1c2f3 #0 #82000000 #e0000000 #3c0007 #0', 
    ' #98000 #a0200000 #78000007 #98030000 #c07c0000 #f #60ba040', 
    ' #3c056401 #2 #0:3 #11fff000 #181b00 #0 #f8000', 
    ' #0:4 #fffff800 #3ff #0:2 #10000000 #0:2 #fc000000', 
    ' #e05fff00 #17f #0:6 #7e00 #7e00000 #0:2 #ffe00000', 
    ' #1ff #0 #fff00000 #1fc0 #0:3 #f800 #0:5', 
    ' #71ffe0e0 #fc #0:4 #1b8000 #fc00000 #380000 #1c38000', 
    ' #1fffff #a00000 #0 #1f80000 #0:3 #fffff800 #3fffff', 
    ' #0:6 #3f000 #0:3 #1f800000 #85af7600 #e #0', 
    ' #20000 #0:2 #70000 #0 #c1f00030 #fff83f #0:2', 
    ' #f800 #ffff8008 #7ff #0:6 #f0000000 #3c180ff #0:4', 
    ' #1900000 #2000 #1f800000 #43f83c07 #3e80 #0:3 #3f10757', 
    ' #f0000600 #7bf0000 #1e00 #3e0 #0:2 #80000 #380000', 
    ' #f0000000 #3fffff #80000000 #f60000e3 #f016 #7e000000 #0', 
    ' #60000000 #0:4 #1fffffe0 #0:2 #f80 #0 #7800', 
    ' #0:2 #3a000 #0 #c3c7fffc #e00003 #3f00000 #f8000', 
    ' #0:2 #80000000 #1 #f8000000 #3fffffff #3f000000 #1e000', 
    ' #803f7c00 #3ff #3f8000 #3f000000 #0:3 #6 #0', 
    ' #1c0000 #0 #80 #2a0300 #0:3 #3000 #ffffe000', 
    ' #3f #0:2 #3f000000 #c0000000 #ffe05807 #17ff #0', 
    ' #3100 #3fe1014 #c4e00000 #1fff #3c00fc #10000000:2 #70000', 
    ' #0 #10000 #0 #4000000 #fc000000 #3ffff #0', 
    ' #a7fc4000 #6f #7dfe #4000000 #0 #b828f8 #0:3', 
    ' #200600 #f00 #10000 #0:4 #201e000e #400 #100000', 
    ' #0 #f0001000 #18 #0 #cd8000 #0 #3000', 
    ' #7f01f000 #800 #0 #6000 #1000000 #120 #0:2', 
    ' #80000000 #1c016c7f #8 #0 #80064000 #3e000f #0', 
    ' #c0010 #0:4 #f000000 #0 #e383f7e0 #19 #0:4', 
    ' #1f600000 #7f800 #107ffff0 #1c000780 #7fc1cf #3c07e #7f8003d0', 
    ' #2100 #e024004 #2800 #40083c00 #fb3fe400 #3 #0', 
    ' #3800000 #0:2 #24000 #e00000 #e800060 #c00e2 #b08003c0', 
    ' #7f72afff #9ff8f8ff #1c3f01b #23bfc4 #cc77e800 #c240007f #1a6401ff', 
    ' #e3ffef80 #4123f #8060008 #c00f8202 #5fc77 #3380038 #0:2', 
    ' #e1000000 #ee040fe0 #23e006 #111000 #1020 #8 #314c0380', 
    ' #b800e008 #0 #400000 #0 #a4004000 #1a1 #0:2', 
    ' #40000 #1000000 #40000:2 #4000 #220 #140000 #1818200', 
    ' #0 #20000 #0:2 #400 #6 #0:2 #2000000', 
    ' #0:4 #80000000 #98001 #0:7 #1000090 #300040 #c0000', 
    ' #0:3 #400 #0:5 #80000000 #681 #0 #20000', 
    ' #10000000 #40001000 #200 #0 #4 #0:3 #400', 
    ' #0:3 #10 #4 #0:2 #400 #0:4 #4000000', 
    ' #0:4 #80100400 #1000 #10004200 #0:2 #1800000 #40', 
    ' #80001001 #0:2 #40 #0:7 #30 #0:3 #4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['M10coarse-1-1-lin-1-3-1'].nodes.getSequenceFromMask(
    mask=('[#0:5 #10000000 #0:341 #200 ]', ), ))
mdb.models['Model-1'].DisplacementBC(amplitude='Amp-1', createStepName='Step-1'
    , distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-5', region=mdb.models['Model-1'].rootAssembly.sets['Set-Nodal-2'], u1=
    5.0, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '785 nodes have dof on which velocity/displacement/acceleration/base motion etc. constraints are specified simultaneously. The nodes have been identified in node set ErrNodeBCRedundantDof.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].rootAssembly.Set(name='Set-Nodal-2', nodes=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-5-1'].nodes.getSequenceFromMask(
    mask=('[#0:8 #10000 #4 #0:3 #20 #0:6 #1000', 
    ' #0:4 #12100 #0 #808000 #0:6 #30000000 #19000000', 
    ' #180 #0:4 #3c800800 #7 #0:3 #14 #30000', 
    ' #2000 #0:2 #700 #0:4 #28000 #0:18 #1000140', 
    ' #0:6 #40000000 #0:20 #3000000 #3 #0 #1c0000', 
    ' #10000000 #2000 #c000000 #0:3 #10000 #0:28 #100000', ' #0:17 #80000 ]', 
    ), ))
mdb.models['Model-1'].boundaryConditions['BC-5'].setValues(u1=0.005)
mdb.models['Model-1'].boundaryConditions['BC-5'].move('Step-1', 'Initial')
#* ValueError: Non-zero boundary condition in initial step.
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 18276, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].boundaryConditions['BC-5'].setValues(u1=5e-05)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 5444, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['Step-1'].setValues(improvedDtMethod=ON, 
    massScaling=((SEMI_AUTOMATIC, MODEL, THROUGHOUT_STEP, 0.0, 0.005, 
    BELOW_MIN, 100, 0, 0.0, 0.0, 0, None), ), timePeriod=40.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].amplitudes['Amp-1'].setValues(data=((0.0, 0.0), (10.0, 
    0.05), (20.0, 0.5), (40.0, 1.0)), smooth=SOLVER_DEFAULT, timeSpan=STEP)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 10080, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Color limit exceeded. Performance may marginally be affected.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 127 instance Beam connection asm-1-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'The element 6501 instance Beam connection asm-9-1 is significantly distorted, which results in the negative mass at one of the element nodes.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['Step-1'].suppress()
mdb.models['Model-1'].StaticStep(adaptiveDampingRatio=0.05, 
    continueDampingFactors=False, initialInc=1e-05, name='Step-2', previous=
    'Initial', stabilizationMagnitude=0.0002, stabilizationMethod=
    DISSIPATED_ENERGY_FRACTION)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].steps['Step-1']
del mdb.models['Model-1'].steps['Step-2']
mdb.models['Model-1'].StaticStep(adaptiveDampingRatio=0.05, 
    continueDampingFactors=False, initialInc=1e-05, minInc=1e-12, name='Step-1'
    , previous='Initial', stabilizationMagnitude=0.0002, stabilizationMethod=
    DISSIPATED_ENERGY_FRACTION)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 6960, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 19 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 3929.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 623.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 3.5e-05, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 5.75e-05, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'An error occurred during a write access to <rank=0,arg_name=C:\\DirectoryName>Job-1.stt file. Check the disk space on your system.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-1'})
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-9', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-5-1'].faces.getSequenceFromMask(
    ('[#200000 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude='Amp-1', createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=100.0, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-9'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].amplitudes['Amp-1'].setValues(data=((0.0, 0.0), (1.0, 
    1.0)), smooth=SOLVER_DEFAULT, timeSpan=STEP)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {})
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-12', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-12'].submit(consistencyChecking=OFF)
mdb.jobs['Job-12']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-12.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-12.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-12'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['Job-12']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-44', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-44'].submit(consistencyChecking=OFF)
mdb.jobs['Job-44']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName\\Job-44.odb', 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 6836, 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 19 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-44', 'memory': 3929.0})
mdb.jobs['Job-44']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(MINIMUM_MEMORY, {'minimum_memory': 623.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-44', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-44']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(STATUS, {'totalTime': 2.5e-06, 'attempts': 2, 
    'timeIncrement': 2.5e-06, 'increment': 1, 'stepTime': 2.5e-06, 'step': 1, 
    'jobName': 'Job-44', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=8500000.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.72 D.O.F. 3 ratio = 1.71437E+12.', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.50 D.O.F. 2 ratio = 4.27398E+12.', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.50 D.O.F. 3 ratio = 150.581E+12  .', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 1 ratio = 37.7026E+12 .', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 2 ratio = 62.2745E+12 .', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 3 ratio = 70.8879E+12 .', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(STATUS, {'totalTime': 5e-06, 'attempts': 1, 
    'timeIncrement': 2.5e-06, 'increment': 2, 'stepTime': 5e-06, 'step': 1, 
    'jobName': 'Job-44', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.72 D.O.F. 3 ratio = 32.3559E+09 .', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.50 D.O.F. 2 ratio = 51.0599E+12 .', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.50 D.O.F. 3 ratio = 13.7261E+12 .', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 1 ratio = 15.6059E+12 .', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 2 ratio = 19.2612E+12 .', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 3 ratio = 326.021E+12  .', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-44'})
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=5.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-44']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44'].submit(consistencyChecking=OFF)
mdb.jobs['Job-44']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName\\Job-44.odb', 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 9552, 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 19 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-44', 'memory': 3929.0})
mdb.jobs['Job-44']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(MINIMUM_MEMORY, {'minimum_memory': 623.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-44', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-44']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(STATUS, {'totalTime': 2.5e-06, 'attempts': 2, 
    'timeIncrement': 2.5e-06, 'increment': 1, 'stepTime': 2.5e-06, 'step': 1, 
    'jobName': 'Job-44', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.72 D.O.F. 3 ratio = 9.27628E+12.', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.50 D.O.F. 2 ratio = 1.09770E+12.', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.50 D.O.F. 3 ratio = 11.7822E+12 .', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 1 ratio = 53.1834E+12 .', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 2 ratio = 76.4719E+12 .', 
    'jobName': 'Job-44'})
mdb.jobs['Job-44']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 3 ratio = 48.7042E+12 .', 
    'jobName': 'Job-44'})
mdb.models['Model-1'].materials['Material-1'].density.setValues(table=((7.8, ), 
    ))
mdb.models['Model-1'].materials['Material-1'].elastic.setValues(table=((
    207000.0, 0.25), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['Job-44']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-177', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-177'].submit(consistencyChecking=OFF)
mdb.jobs['Job-177']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-177'})
mdb.jobs['Job-177']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-177'})
mdb.jobs['Job-177']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName\\Job-177.odb', 'jobName': 'Job-177'})
mdb.jobs['Job-177']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-177'})
mdb.jobs['Job-177']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 7028, 'jobName': 'Job-177'})
mdb.jobs['Job-177']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-177'})
mdb.jobs['Job-177']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-177'})
mdb.models['Model-1'].materials['Material-1'].elastic.setValues(table=((
    210000.0, 0.25), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=8530000.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['Job-177']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1dasdsa', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-1dasdsa'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1dasdsa']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName\\Job-1dasdsa.odb', 'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 2384, 'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 19 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1dasdsa', 'memory': 3929.0})
mdb.jobs['Job-1dasdsa']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(MINIMUM_MEMORY, {'minimum_memory': 623.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-1dasdsa', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1dasdsa']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(STATUS, {'totalTime': 2.5e-06, 'attempts': 2, 
    'timeIncrement': 2.5e-06, 'increment': 1, 'stepTime': 2.5e-06, 'step': 1, 
    'jobName': 'Job-1dasdsa', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1dasdsa']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.72 D.O.F. 3 ratio = 48.1611E+09 .', 
    'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.50 D.O.F. 2 ratio = 568.540E+12  .', 
    'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.50 D.O.F. 3 ratio = 160.589E+12  .', 
    'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 1 ratio = 37.5862E+12 .', 
    'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 2 ratio = 376.653E+09  .', 
    'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 3 ratio = 28.4930E+12 .', 
    'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(STATUS, {'totalTime': 5e-06, 'attempts': 1, 
    'timeIncrement': 2.5e-06, 'increment': 2, 'stepTime': 5e-06, 'step': 1, 
    'jobName': 'Job-1dasdsa', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1dasdsa']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.72 D.O.F. 3 ratio = 23.3013E+09 .', 
    'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.50 D.O.F. 2 ratio = 53.8803E+12 .', 
    'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.50 D.O.F. 3 ratio = 25.6290E+12 .', 
    'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 1 ratio = 19.5311E+12 .', 
    'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 2 ratio = 24.3492E+12 .', 
    'jobName': 'Job-1dasdsa'})
mdb.jobs['Job-1dasdsa']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 3 ratio = 23.5709E+12 .', 
    'jobName': 'Job-1dasdsa'})
mdb.models['Model-1'].boundaryConditions['BC-1'].suppress()
mdb.models['Model-1'].boundaryConditions['BC-2'].suppress()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['Job-1dasdsa']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-beam', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-beam'].submit(consistencyChecking=OFF)
mdb.jobs['Job-beam']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8721 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName\\Job-beam.odb', 'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 9884, 'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 19 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-beam', 'memory': 3929.0})
mdb.jobs['Job-beam']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(MINIMUM_MEMORY, {'minimum_memory': 622.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-beam', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-beam']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(STATUS, {'totalTime': 2.5e-06, 'increment': 1, 
    'attempts': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 2.5e-06, 'stepTime': 2.5e-06, 'step': 1, 
    'jobName': 'Job-beam', 'severe': 0, 'equilibrium': 3})
mdb.jobs['Job-beam']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.72 D.O.F. 3 ratio = 41.0713E+09 .', 
    'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.50 D.O.F. 2 ratio = 188.635E+12  .', 
    'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.50 D.O.F. 3 ratio = 28.5756E+12 .', 
    'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 1 ratio = 19.5382E+12 .', 
    'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 2 ratio = 56.9779E+12 .', 
    'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node Beam connection asm-5-1.7 D.O.F. 3 ratio = 29.2958E+12 .', 
    'jobName': 'Job-beam'})
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('M10coarse-2-1-lin-1-3', ), 
    number1=1, number2=7, spacing1=7.56939, spacing2=19.3072)
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, -1.0, 0.0), instanceList=('M10coarse-2-1-lin-1-3', )
    , number1=1, number2=3, spacing1=7.56939, spacing2=19.3072)
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1-lin-1-3-lin-1-6']
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1-lin-1-3-lin-1-2-1']
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1-7', ), vector=(0.378362, 2.557521, -3.704298))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1-3-1', ), vector=(-0.080142, -4.330127, 
    1.157483))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1-3-1', ), vector=(-0.954854, 4.798815, 
    13.43091))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1-3-1', ), vector=(0.299095, -1.160254, 
    -4.319785))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1-3-1', ), vector=(0.299095, -1.160254, 
    -4.319785))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=(
    'M10coarse-1-1-lin-1-3-1-lin-1-3', 'M10coarse-2-1-lin-1-3-lin-1-3-1'), 
    number1=4, number2=9, spacing1=66.3668, spacing2=20.8037)
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-1-1-lin-1-3-1-lin--lin-2-2', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-2-1', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-2-1', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-2-2', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-2-3', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-2-4', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-2-5', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-2-6', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-2-7', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-2-8', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-2-9', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-2-9', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-2-8', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-2-7', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-2-6', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-2-5', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-2-4', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-2-3'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-1-1-lin-1-3-1-lin--lin-3-1', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-3-1', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-3-2', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-3-2', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-3-3', 'Datum csys-1', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-3-5', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-3-6', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-3-7', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-3-8', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-3-9', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-3-4', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-3-3', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-3-4', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-3-5', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-3-7', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-3-8', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-3-6', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-3-9'))
del mdb.models['Model-1'].rootAssembly.features['M10coarse-1-1-lin-1-3-lin-1-3']
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-5', 'M10coarse-1-1-lin-1-3'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-4', 'M10coarse-1-1-lin-1-2'))
del mdb.models['Model-1'].rootAssembly.features['M10coarse-1-1-lin-1-3-1']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.rotate(angle=180.0, axisDirection=(0.0, 
    -3.169873, 3.169873), axisPoint=(33.994625, -73.099098, 25.82007), 
    instanceList=('M10coarse-1-1-lin-1-3-1-lin--lin-4-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-1-1-lin-1-3-1-lin--lin-4-1', ), vector=(46.363746, 19.209633, 
    17.830127))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-1-1-lin-1-3-1-lin--lin-4-1', ), vector=(-2.312646, -5.0, -7.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-1-1-lin-1-3-1-lin--lin-4-1', ), vector=(-1.124854, 0.0, 2.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-1', ), vector=(-37.950828, 3.329229, 
    -8.392304))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-1', ), vector=(-1.046002, -2.098815, 
    1.142229))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-1', ), vector=(-1.382816, -1.160254, 
    0.575733))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-1', ), vector=(-0.365403, -2.098815, 
    -0.153601))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-1', ), vector=(-0.365412, 2.098782, 
    -0.153621))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-1', ), vector=(5.620267, -2.098815, 
    0.260837))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-1', ), vector=(-0.299095, 1.160254, 
    4.319785))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-1', ), vector=(0.098783, 2.477053, 
    -1.426711))
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1-lin-1-3-lin-1--lin-4-2']
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1-lin-1-3-lin-1--lin-1-7']
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1-5', ), vector=(0.463233, 6.428926, -1.259269))
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1-lin-1-3-lin-1--lin-1-6']
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1-4', ), vector=(-1.163864, 4.330127, 
    -2.586569))
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1-lin-1-3-lin-1--lin-1-5']
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1-lin-1-3-lin-1--lin-1-4']
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1-lin-1-3-lin-1--lin-1-3']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2', ), vector=(0.299095, -1.160254, 
    -4.319785))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1-3-1', ), vector=(5.98567, 0.0, 0.414438))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1-3-1', ), vector=(0.299095, 1.160254, 
    -4.319785))
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1-lin-1-3-lin-1-7']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].rootAssembly.features['M10coarse-1-1-lin-1-3-1-lin--lin-4-2']
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=(
    'M10coarse-1-1-lin-1-3-1-lin--lin-4-1', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-1'), number1=1, number2=10, spacing1=
    66.3668, spacing2=19.3072)
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-1-1-lin-1-3-1-lin--lin-4-9', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-4-8', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-4-7', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-4-6', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-4-5', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-4-4', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-4-3'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-9', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-8', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-7', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-6', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-4', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-5', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-3'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-8-1', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-8-1', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-2-1', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2-1'))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].rootAssembly.features['M10coarse-1-1-lin-1-3-1-lin--lin-1-2']
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1-lin-1-3-lin-1--lin-1-2']
del mdb.models['Model-1'].rootAssembly.features['M10coarse-1-1-lin-1-3-1-lin--lin-1-8']
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1-lin-1-3-lin-1--lin-1-8']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-1-1-lin-1-3-1-lin-1-3', ), vector=(9.624855, -6.408752, 
    -43.901201))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, -1.0, 0.0), instanceList=(
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-3', ), number1=1, number2=3, spacing1=
    66.3668, spacing2=20.002)
del mdb.models['Model-1'].rootAssembly.features['M10coarse-1-1-lin-1-3-1-lin--lin-1-2']
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1-3-1', ), vector=(-5.0, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-1-1-lin-1-3-1-lin-1-3', ), vector=(0.375145, 8.788257, 
    1.240947))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-1-1-lin-1-3-1-lin-1-3', ), vector=(-6.971688, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-1-1-lin-1-3-1-lin-1-3', ), vector=(-8.75, 0.0, 0.0))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, -1.0, 0.0), instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1-3-1', ), number1=1, number2=2, spacing1=
    7.56939, spacing2=19.3072)
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2', ), vector=(2.925378, 19.377392, 
    -59.422677))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2', ), vector=(0.563196, 2.9, 
    14.665169))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2', ), vector=(-0.59819, 0.0, 8.63957))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2', ), vector=(1.485626, 0.0, 
    -7.491812))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2', ), vector=(-4.695394, -1.160254, 
    0.346375))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2', ), vector=(-27.300639, 7.590381, 
    5.977004))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-9', ), vector=(-1.155509, -4.76314, 
    -7.347363))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-9', ), vector=(-0.285265, 6.428926, 
    -1.311093))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, -1.0, 0.0), instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1-3-1', ), number1=1, number2=2, spacing1=
    7.56939, spacing2=19.3072)
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2-1', ), vector=(-3.545064, 23.037646, 
    -49.663976))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2-1', ), vector=(-0.251106, -2.098815, 
    3.626533))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2-1', ), vector=(-0.49538, -1.160254, 
    1.723491))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=(
    'M10coarse-1-1-lin-1-3-1-lin-1-3', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2-1'), number1=1, number2=11, spacing1=
    66.3668, spacing2=20.0558)
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-2-1-lin-1-3-lin-1-lin-1-11', 
    'M10coarse-1-1-lin-1-3-1-lin-lin-1-11'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-1-1-lin-1-3-1-lin-lin-1-10-1', 
    'M10coarse-2-1-lin-1-3-lin-1-lin-1-10-1'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-8', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-8'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2-2', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-2'))
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, -1.0, 0.0), instanceList=(
    'M10coarse-1-1-lin-1-3-1-lin--lin-4-1', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-1'), number1=1, number2=2, spacing1=
    66.3668, spacing2=19.3072)
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2-2', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-2'), vector=(0.342931, 24.571356, 
    -47.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-2', ), vector=(2.330127, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=(
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2-2', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-2'), number1=1, number2=13, spacing1=
    66.3668, spacing2=19.3072)
del mdb.models['Model-1'].rootAssembly.features['M10coarse-1-1-lin-1-3-1-lin-lin-1-13']
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-2-1-lin-1-3-lin-1-lin-1-13', 
    'M10coarse-2-1-lin-1-3-lin-1-lin-1-12', 
    'M10coarse-1-1-lin-1-3-1-lin-lin-1-12'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-2-1', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2-3', 
    'M10coarse-1-1-lin-1-3-1-lin-lin-1-11', 
    'M10coarse-2-1-lin-1-3-lin-1-lin-1-11'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-8', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-8'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-1-1-lin-1-3-1-lin-lin-1-10-1', 
    'M10coarse-2-1-lin-1-3-lin-1-lin-1-10-1'))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-beam'].submit(consistencyChecking=OFF)
mdb.jobs['Job-beam']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-beam'})
mdb.jobs['Job-beam'].submit(consistencyChecking=OFF)
mdb.jobs['Job-beam']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-beam.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-beam.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(JOB_ABORTED, {})
mdb.jobs['Job-beam']._Message(JOB_ABORTED, {})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-beam'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-beam']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-beam.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(JOB_ABORTED, {})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-beam'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-beam']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '16694 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName-parts\\Job-beam.odb', 'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 8092, 'jobName': 'Job-beam'})
mdb.jobs['Job-beam']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-beam'})
del mdb.jobs['Job-beam']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-Parts', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-Parts'].submit(consistencyChecking=OFF)
mdb.jobs['Job-Parts']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-Parts'})
mdb.jobs['Job-Parts']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '16694 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-Parts'})
mdb.jobs['Job-Parts']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName-parts\\Job-Parts.odb', 'jobName': 'Job-Parts'})
mdb.jobs['Job-Parts']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-Parts'})
mdb.jobs['Job-Parts']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 7328, 'jobName': 'Job-Parts'})
mdb.jobs['Job-Parts']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-Parts'})
mdb.jobs['Job-Parts']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-Parts'})
mdb.jobs['Job-Parts']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'An error occurred during a write access to C:\\Users\\mofid\\AppData\\Local\\Temp\\mofid_Job-Parts_9872\\Job-Parts.ebe.0 file. Check the disk space on your system.', 
    'jobName': 'Job-Parts'})
mdb.jobs['Job-Parts']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-Parts'})
mdb.jobs['Job-Parts']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-Parts'})
mdb.jobs.changeKey(fromName='Job-Parts', toName='JobParts')
mdb.jobs['JobParts'].submit(consistencyChecking=OFF)
mdb.jobs['JobParts']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'JobParts'})
mdb.jobs['JobParts']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '16694 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'JobParts'})
mdb.jobs['JobParts']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName\\JobParts.odb', 'jobName': 'JobParts'})
mdb.jobs['JobParts']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'JobParts'})
mdb.jobs['JobParts']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 10440, 'jobName': 'JobParts'})
mdb.jobs['JobParts']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'JobParts'})
mdb.jobs['JobParts']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'JobParts'})
mdb.jobs['JobParts']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'An error occurred during a write access to C:\\Users\\mofid\\AppData\\Local\\Temp\\mofid_JobParts_7000\\JobParts.ebe.0 file. Check the disk space on your system.', 
    'jobName': 'JobParts'})
mdb.jobs['JobParts']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'JobParts'})
mdb.jobs['JobParts']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'JobParts'})
mdb.jobs['JobParts'].submit(consistencyChecking=OFF)
mdb.jobs['JobParts']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'JobParts'})
del mdb.jobs['JobParts']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(INTERRUPTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-1'})
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '16694 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '16694 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\mofid\\Downloads\\DirectoryName\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\mofid\\Downloads\\DirectoryName\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 5344, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 5344, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '16694 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName1\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 8412, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'An error occurred during a write access to C:\\Users\\mofid\\AppData\\Local\\Temp\\mofid_Job-1_10608\\Job-1.ebe.0 file. Check the disk space on your system.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'An error occurred during a write access to <rank=0,arg_name=C:\\DirectoryName1>Job-1.stt file. Check the disk space on your system.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '16694 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName1\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 3196, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'An error occurred during a write access to C:\\Users\\mofid\\AppData\\Local\\Temp\\mofid_Job-1_1616\\Job-1.ebe.0 file. Check the disk space on your system.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'An error occurred during a write access to <rank=0,arg_name=C:\\DirectoryName1>Job-1.stt file. Check the disk space on your system.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=853.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '16694 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName1\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 4628, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'An error occurred during a write access to C:\\Users\\mofid\\AppData\\Local\\Temp\\mofid_Job-1_11920\\Job-1.ebe.0 file. Check the disk space on your system.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'An error occurred during a write access to <rank=0,arg_name=C:\\DirectoryName1>Job-1.stt file. Check the disk space on your system.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {})
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '16694 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName1\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 2828, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-1'].suppress()
mdb.models['Model-1'].boundaryConditions['BC-2'].resume()
mdb.models['Model-1'].boundaryConditions['BC-2'].suppress()
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'An error occurred during a write access to C:\\Users\\mofid\\AppData\\Local\\Temp\\mofid_Job-1_8336\\Job-1.ebe.0 file. Check the disk space on your system.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-5-1'].faces.getSequenceFromMask(
    ('[#200000 ]', ), ), name='Set-Force')
mdb.models['Model-1'].DisplacementBC(amplitude='Amp-1', createStepName='Step-1'
    , distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-5', region=mdb.models['Model-1'].rootAssembly.sets['Set-Force'], u1=
    0.001, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
# Save by mofid on 2024_12_29-11.37.01; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-9', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-7', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-6', 'M10coarse-1-1', 
    'M10coarse-1-1-lin-1-2-1', 'M10coarse-1-1-lin-1-3-1-lin--lin-1-3', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-3-2', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-4-1', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-3-1', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-4', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-5', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-6-1', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-7-1', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-9-1', 
    'M10coarse-1-1-lin-1-3-1-lin-lin-1-10'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-9', 'M10coarse-2-1-lin-1-3-lin-1-5', 
    'M10coarse-2-1-lin-1-3-lin-1-4', 'M10coarse-2-1', 'M10coarse-2-1-lin-1-2', 
    'M10coarse-2-1-lin-1-3-lin-1-3-1', 'M10coarse-2-1-lin-1-3', 
    'M10coarse-2-1-lin-1-3-lin-1-lin-1-10', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-9-1', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-7', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-6', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-5', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-4', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-3', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-4-1'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-2-1-lin-1-3-lin-1-3', 'M10coarse-2-1-lin-1-3-lin-1-2'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-9-3', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-7-3', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-6-3', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-5-2', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-4-2', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-3-4', 
    'M10coarse-1-1-lin-1-3-1-lin-1-3', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-4-1', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-3-3', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-5-1', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-7-2', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-9-2', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-6-2', 
    'M10coarse-1-1-lin-1-3-1-lin--lin-1-2'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-9-3', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-7-2', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-6-2', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-5-2', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-4-2', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-3-2', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2-2', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-2-1', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-3-1', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-4-1', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-5-1', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-6-1', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-7-1', 
    'M10coarse-2-1-lin-1-3-lin-1--lin-1-9-2'))
# Save by mofid on 2024_12_29-11.39.28; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=19.63, name='__profile__', 
    sheetSize=785.22, transform=
    mdb.models['Model-1'].parts['Beam connection asm-5'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Beam connection asm-5'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Beam connection asm-5'].edges[1], 
    sketchOrientation=RIGHT, origin=(-349.105776, 73.874691, 13.32007)))
mdb.models['Model-1'].parts['Beam connection asm-5'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 117.78), point1=(-9.815, 107.965))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 58.89), point1=(-9.815, 49.075))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(-9.815, -9.815))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, -58.89), point1=(-9.815, -68.705))
mdb.models['Model-1'].parts['Beam connection asm-5'].CutExtrude(
    flipExtrudeDirection=OFF, sketch=
    mdb.models['Model-1'].sketches['__profile__'], sketchOrientation=RIGHT, 
    sketchPlane=mdb.models['Model-1'].parts['Beam connection asm-5'].faces[0], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['Model-1'].parts['Beam connection asm-5'].edges[1])
del mdb.models['Model-1'].sketches['__profile__']
# Save by mofid on 2024_12_29-11.40.32; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=19.63, name='__profile__', 
    sheetSize=785.22, transform=
    mdb.models['Model-1'].parts['Beam connection asm-6'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Beam connection asm-6'].faces[21], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Beam connection asm-6'].edges[59], 
    sketchOrientation=RIGHT, origin=(262.894224, 73.874691, 13.32007)))
mdb.models['Model-1'].parts['Beam connection asm-6'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 117.78), point1=(-9.815, 112.8725))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 58.89), point1=(-4.9075, 44.1675))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(-4.9075, -14.7225))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, -58.89), point1=(-9.815, -73.6125))
mdb.models['Model-1'].parts['Beam connection asm-6'].CutExtrude(
    flipExtrudeDirection=OFF, sketch=
    mdb.models['Model-1'].sketches['__profile__'], sketchOrientation=RIGHT, 
    sketchPlane=mdb.models['Model-1'].parts['Beam connection asm-6'].faces[21], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['Model-1'].parts['Beam connection asm-6'].edges[59])
del mdb.models['Model-1'].sketches['__profile__']
# Save by mofid on 2024_12_29-11.41.01; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Beam connection asm-6'].generateMesh()
mdb.models['Model-1'].parts['Beam connection asm-5'].generateMesh()
# Save by mofid on 2024_12_29-11.41.28; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].boundaryConditions['BC-5'].setValues(u1=0.0012)
# Save by mofid on 2024_12_29-11.41.46; build 2023 2022_09_28-21.41.55 183150
# Save by mofid on 2024_12_29-11.42.14; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '6831 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName1\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 12468, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 10 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 1511.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 460.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Sun Dec 29 11:43:18 2024', 
    'jobName': 'Job-1'})
# Save by mofid on 2024_12_29-11.43.34; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].materials['Material-1'].density.setValues(table=((7850.0, 
    ), ))
mdb.models['Model-1'].materials['Material-1'].elastic.setValues(table=((
    200000000000.0, 0.25), ))
mdb.models['Model-1'].boundaryConditions['BC-5'].setValues(u1=0.0005)
# Save by mofid on 2025_01_19-05.32.52; build 2023 2022_09_28-21.41.55 183150
# Save by mofid on 2025_01_19-05.33.07; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '6831 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName4\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 6400, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 10 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 1641.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 274.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {})
mdb.models['Model-1'].boundaryConditions['BC-5'].suppress()
mdb.models['Model-1'].loads['Load-1'].resume()
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=10004.0)
# Save by mofid on 2025_01_19-05.50.23; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '6831 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName4\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 9820, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 10 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 1641.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 274.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {})
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Beam connection asm-1-1', 
    'Beam connection asm-3-1', 'Beam connection asm-5-1'))
del mdb.models['Model-1'].rootAssembly.features['Beam connection asm-7-1']
del mdb.models['Model-1'].rootAssembly.features['M10coarse-2-1-lin-1-3-lin-1--lin-1-2']
mdb.models['Model-1'].materials['Material-1'].density.setValues(table=((7.8, ), 
    ))
mdb.models['Model-1'].materials['Material-1'].elastic.setValues(table=((
    200000.0, 0.25), ))
# Save by mofid on 2025_01_20-03.51.56; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].loads['Load-1'].suppress()
del mdb.models['Model-1'].boundaryConditions['BC-1']
del mdb.models['Model-1'].boundaryConditions['BC-2']
del mdb.models['Model-1'].boundaryConditions['BC-5']
del mdb.models['Model-1'].boundaryConditions['BC-3']
del mdb.models['Model-1'].boundaryConditions['BC-4']
mdb.models['Model-1'].rootAssembly.Set(cells=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-8-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-9-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), edges=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-8-1'].edges.getSequenceFromMask(
    mask=('[#2f0 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-9-1'].edges.getSequenceFromMask(
    mask=('[#6ccdb908 #c006d81b #666db036 #b ]', ), ), faces=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-8-1'].faces.getSequenceFromMask(
    mask=('[#36 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-9-1'].faces.getSequenceFromMask(
    mask=('[#91fffff #48 ]', ), ), name='Set-8', vertices=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-8-1'].vertices.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-9-1'].vertices.getSequenceFromMask(
    mask=('[#5532b108 #2a002a0 #a455 ]', ), ))
mdb.models['Model-1'].EncastreBC(createStepName='Initial', localCsys=None, 
    name='BC-1', region=mdb.models['Model-1'].rootAssembly.sets['Set-8'])
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Beam connection asm-6-1'].faces.getSequenceFromMask(
    ('[#0 #1 ]', ), ), name='Set-9')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-2', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-9'], u1=SET, u2=UNSET, 
    u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].boundaryConditions['BC-2'].setValuesInStep(amplitude=
    'Amp-1', stepName='Step-1', u1=-0.0009)
# Save by mofid on 2025_01_20-03.53.29; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
# Save by mofid on 2025_01_20-03.53.56; build 2023 2022_09_28-21.41.55 183150
